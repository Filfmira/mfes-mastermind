class Utilities
	types
		public String = seq of char;

	functions

		-- Return the minimum of two values
		static public min : nat * nat -> nat
			min(a, b) ==
				if a <= b then a
				else b;

		static public seqToStringColor: seq of (seq1 of Cor`Cor) * (seq1 of Cor`Cor -> String) -> String
		seqToStringColor (sequence, printer) ==
			if sequence = [] then "[]"
			else "[" ^ auxSeqToStringColor(sequence, printer) ^ "]";


		static private auxSeqToStringColor : seq1 of (seq1 of Cor`Cor) * (seq1 of Cor`Cor -> String) -> String
		auxSeqToStringColor (sequence, printer) ==
			if len sequence = 1 then
				printer(hd sequence)
			else
				printer(hd sequence) ^ ", " ^ auxSeqToStringColor(tl sequence, printer);


		static private setToSeqColor : set of (seq1 of Cor`Cor) -> seq of (seq1 of Cor`Cor)
		setToSeqColor (s) ==
			if card s = 1 then
				let x in set s in [x]
			else
				let x in set s in
					[x] ^ setToSeqColor(s\{x})
		pre s <> {}
		post forall element in set s & element in set elems RESULT;


		static public setToStringColor : set of (seq1 of Cor`Cor) * (seq1 of Cor`Cor -> String) -> String
		setToStringColor(s, printer) ==
			if s = {} then "{}"
			else "{" ^ auxSeqToStringColor(setToSeqColor(s), printer) ^ "}";
		
		-----------------------------------------------------------------------------
		
		static public seqToStringString: seq of String * (String -> String) -> String
		seqToStringString (sequence, printer) ==
			if sequence = [] then "[]"
			else "[" ^ auxSeqToStringString(sequence, printer) ^ "]";


		static private auxSeqToStringString: seq1 of String * (String -> String) -> String
		auxSeqToStringString (sequence, printer) ==
			if len sequence = 1 then
				printer(hd sequence)
			else
				printer(hd sequence) ^ ", " ^ auxSeqToStringString(tl sequence, printer);


		static private setToSeqString: set of String -> seq of String
		setToSeqString (s) ==
			if card s = 1 then
				let x in set s in [x]
			else
				let x in set s in
					[x] ^ setToSeqString(s\{x})
		pre s <> {}
		post forall element in set s & element in set elems RESULT;


		static public setToStringString: set of String * (String -> String) -> String
		setToStringString(s, printer) ==
			if s = {} then "{}"
			else "{" ^ auxSeqToStringString(setToSeqString(s), printer) ^ "}";	
			
		-----------------------------------------------------------------------------
		
		static public seqToString[@T]: seq of [@T] * ([@T] -> String) -> String
		seqToString (sequence, printer) ==
			if sequence = [] then "[]"
			else "[" ^ auxSeqToString(sequence, printer) ^ "]";


		static private auxSeqToString[@T]: seq1 of [@T] * ([@T] -> String) -> String
		auxSeqToString (sequence, printer) ==
			if len sequence = 1 then
				printer(hd sequence)
			else
				printer(hd sequence) ^ ", " ^ auxSeqToString(tl sequence, printer);


		static private setToSeq[@T]: set of [@T] -> seq of [@T]
		setToSeq (s) ==
			if card s = 1 then
				let x in set s in [x]
			else
				let x in set s in
					[x] ^ setToSeq(s\{x})
		pre s <> {}
		post forall element in set s & element in set elems RESULT;


		static public setToString[@T]: set of [@T] * ([@T] -> String) -> String
		setToString(s, printer) ==
			if s = {} then "{}"
			else "{" ^ auxSeqToString(setToSeq(s), printer) ^ "}";
			

end Utilities
