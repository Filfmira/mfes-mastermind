class Tabuleiro
types
	public String = Utilities`String;
	
values
	public comprimentoChave : nat1 = 4;

instance variables
	private chave : seq1 of Cor`Cor;
	inv len chave = comprimentoChave;
	
	private tentativas : seq of (seq1 of Cor`Cor) := [];
		inv forall tentativa in set elems tentativas & len tentativa = comprimentoChave and
			len tentativas <= maxNumeroTentativas;

	public static maxNumeroTentativas : nat1 := 9;
	
operations
		
		--Construtor que gera uma chave aleatoria e inicializa as tentativas vazias e retorna o tabuleiro
		public Tabuleiro : () ==> Tabuleiro
		Tabuleiro() == (
			chave := Cor`gerarSequenciaDeCores(comprimentoChave);
			tentativas := [];
		)
		post len chave = comprimentoChave and tentativas = [];


		--Construtor que recebe uma chave, inicializa as tentativas a vazio e retorna o tabuleiro
		public Tabuleiro : seq1 of Cor`Cor ==> Tabuleiro
		Tabuleiro (chaveP) == (
			chave := chaveP;
			tentativas := [];
		)
		pre len chaveP = comprimentoChave
		post chave = chaveP and tentativas = [];

		--Retorna o número de tentativas restantes que um jogador tem para adivinhar a chave
		public numTentativasRestantes : () ==> nat
			numTentativasRestantes () == return maxNumeroTentativas - len tentativas
		pre (len tentativas) <= maxNumeroTentativas
		post RESULT = maxNumeroTentativas - len tentativas;

		--Retorna o número de tentativas já feitas pelo jogador
		public numTentativasFeitas : () ==> nat
			numTentativasFeitas() == return len tentativas
		post RESULT = len tentativas;

		--Recebe uma sequencia de cores e adiciona-a à sequencia de tentativas
		public fazerJogada : seq1 of Cor`Cor ==> ()
			fazerJogada (tentativa) == tentativas := tentativas ^ [tentativa]
		pre len tentativa = comprimentoChave and
			not gameOver()
		post tentativas = tentativas~ ^ [tentativa]; --tentativas~ -> (sql) OLD.tentativas


		-- Retorna true se a chave tiver sido encontrada na sequencia de tentativas
		pure public isChaveEncontrada : () ==> bool
			isChaveEncontrada () == return chave in set elems tentativas
		post chave in set elems tentativas => RESULT = true;

		-- Retorna true se a chave tiver sido encontrada ou se o numero de tentativas exceder o maximo
		pure public gameOver : () ==> bool
			gameOver () == return isChaveEncontrada() or len tentativas = maxNumeroTentativas
		post RESULT = (isChaveEncontrada() or len tentativas = maxNumeroTentativas);

		--Recebe uma sequencia de cores e retorna o numero de cores nos sitios certos comparando
		--com a chave
		public calcularCoresSitiosCertos : seq of Cor`Cor ==> nat
			calcularCoresSitiosCertos (tentativa) ==
				return numCoresSitioCerto[Cor`Cor](tentativa, chave)
		pre len tentativa = len chave
		post RESULT <= len chave;

		--Recebe uma sequencia de cores e retorna o numero de cores nos sitios errados comparando
		--com a chave
		public calcularCoresSitiosErrados : seq of Cor`Cor ==> nat
			calcularCoresSitiosErrados (tentativa) ==
				(dcl temp : nat := 0;
					for all color in set Cor`Cores do
						temp := temp +
							Utilities`min(
								numOcurrencias[Cor`Cor](chave, color),
								numOcurrencias[Cor`Cor](tentativa, color));
					return temp - calcularCoresSitiosCertos(tentativa);
				)
		pre len tentativa = len chave
		post RESULT <= len chave;

		--Retorna a chave (solução) do tabuleiro
		pure public getChave : () ==> seq1 of Cor`Cor
			getChave () == return chave
		post RESULT = chave;

		--Retorna a sequencia de tentaticas já feitas pelo jogador
		public getTentativas : () ==> seq of (seq1 of Cor`Cor)
			getTentativas () == return tentativas
		post RESULT = tentativas;

		--Retorna o numero máximo de tentivas
		public getMaxNumeroTentativas: () ==> nat1
			getMaxNumeroTentativas () == return maxNumeroTentativas
		post RESULT = maxNumeroTentativas;


functions

		-- Recebe duas sequencias de cores e retorna o numero de elementos na sequencia1 que
		-- sejam iguais em valor e posição à sequencia2
		private numCoresSitioCerto[@T] : seq of @T * seq of @T -> nat
			numCoresSitioCerto (firstSeq, secondSeq) ==
				if firstSeq = [] then
					0
				elseif hd firstSeq = hd secondSeq then
					1 + numCoresSitioCerto[@T](tl firstSeq, tl secondSeq)
				else
					numCoresSitioCerto[@T](tl firstSeq, tl secondSeq)
			pre (len firstSeq) = (len secondSeq)
			post firstSeq = [] => RESULT = 0;

		-- Retorna o numero de vezes que um elemento aparece numa sequencia
		private numOcurrencias[@T] : seq of @T * @T -> nat
			numOcurrencias (sequence, element) ==
				if sequence = [] then
					0
				elseif hd sequence = element then
					1 + numOcurrencias[@T](tl sequence, element)
				else
					numOcurrencias[@T](tl sequence, element)
			post sequence = [] => RESULT = 0;
			
traces
-- TODO Define Combinatorial Test Traces here
end Tabuleiro