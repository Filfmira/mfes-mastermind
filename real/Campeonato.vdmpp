class Campeonato
types
	public String = Utilities`String;
	
values
-- TODO Define values here
instance variables
	private jogadores : set of String;
	inv card jogadores >= 2 and (card jogadores) mod 2 = 0; --numero par de equipas.

	private jogos : set of Jogo := {};
	inv forall jogo in set jogos & jogo.getJogadores() subset jogadores;

operations

	--Construtor que recebe um set de jogadores e retorna o campeonato criado
	public Campeonato: set of String ==> Campeonato
	Campeonato(eqs) == (
		jogadores := eqs;
	)
	pre card eqs >= 2 and (card eqs) mod 2 = 0
	post jogadores = eqs;
	
	--Retorna o set de jogadores de um campeonato
	pure public getJogadores: () ==> set of String
	getJogadores() ==
		return jogadores
	post RESULT = jogadores;

	--Retorna o set de jogos de um campeonato
	public getJogos: () ==> set of Jogo
	getJogos() == (
		return jogos;
	)
	post RESULT = jogos;
	
	--Recebe dois jogadores, gera um jogo com chaves aleatorias e retorna esse jogo
	public novoJogoAleatorio: String * String ==> Jogo
	novoJogoAleatorio(jog1, jog2) == (

		dcl jogo : Jogo := new Jogo(
			{jog1 |-> Cor`gerarSequenciaDeCores(Tabuleiro`comprimentoChave),
			 jog2 |-> Cor`gerarSequenciaDeCores(Tabuleiro`comprimentoChave)},
			self);

		jogos := jogos union {jogo};

		return jogo;

	)
	pre {jog1, jog2} subset jogadores and
		{jog1, jog2} not in set getJogadoresJogos()
	post RESULT in set jogos;
	
	
	--Recebe um map jogador->chave, gera o Jogo com estes valores e retorna esse jogo
	public novoJogo : map String to (seq of Cor`Cor) ==> Jogo
	novoJogo(chaves) == (

		dcl g : Jogo := new Jogo(chaves, self);

		jogos := jogos union {g};

		return g;

	)
	pre dom chaves subset jogadores and
		dom chaves not in set getJogadoresJogos() and
		forall solution in set rng chaves & len solution = Tabuleiro`comprimentoChave
	post RESULT in set jogos;
	
	
	--Recebe um set de jogadores e adiciona-os ao set de jogadores do campeonato
	public adicionarJogadores : set of String ==> ()
	adicionarJogadores(eqs) == (
		jogadores := jogadores union eqs;
	)
	pre (eqs inter jogadores = {}) and (card eqs) mod 2 = 0
	post jogadores = jogadores~ union eqs;
	
	
	-- Retorna a pontuação de um jogador.
	-- Em cada jogo, o jogador que está a tentar adivinhar
	-- ganha tantos pontos, quantas tentativas não usou.
	public getPontuacao : String ==> nat
	getPontuacao (jogador) == (
		dcl jogosFeitos : set of Jogo := jogosJogador(jogador),
			score : nat := 0;
			
			for tabuleiro in getTabuleirosJogados(jogosFeitos, jogador) do
				score := score + Tabuleiro`maxNumeroTentativas - len tabuleiro.getTentativas();

			return score;
	)
	pre jogador in set jogadores;
	
	
	--Retorna o lugar do jogador na classificação do campeonato
	public getRankJogador : String ==> nat
	getRankJogador (jogador) == (
		dcl pontuacoes : map String to nat := getPontuacoes();
		dcl numMelhores : nat := 0;
		for all jog in set jogadores do
			if pontuacoes(jog) > pontuacoes(jogador) then
				numMelhores := numMelhores + 1;
		numMelhores := numMelhores + 1;
		return numMelhores;
	);
	
	
	-- Recebe os jogos jogados por uma equipa
	-- Retorna os tabuleiros que lhe correspondem em cada jogo
	public 	getTabuleirosJogados : set of Jogo * String ==> seq of Tabuleiro
	getTabuleirosJogados (jogos, jogador) == (
		dcl ret : seq of Tabuleiro := [] ;
		for all jogo in set jogos do
			ret := [jogo.getTabuleiroJogador(jogador)] ^ ret;	
		return ret;
	)
	pre jogador in set jogadores and
		forall jogo in set jogos & jogador in set jogo.getJogadores();
	
	
	-- Retorna pares de equipas que jogaram 
	pure public getJogadoresJogos: () ==> set of set of String
	getJogadoresJogos () ==
		return {jogo.getJogadores() | jogo in set jogos}
	post jogos = {} => RESULT = {};

	--Retorna um set de jogos já jogados por um jogador
	public jogosJogador : String ==> set of Jogo
	jogosJogador (jogador) ==
		return {jogo | jogo in set jogos & jogador in set jogo.getJogadores()}
	post forall jogo in set RESULT
		& jogador in set jogo.getJogadores();
		
	--Retorna o numero de tentativas de todos os jogos jogados pelo vencedor
	public getTentativasVencedor : () ==> nat
	getTentativasVencedor () == (
		dcl pontuacoes : map String to nat := getPontuacoes();
		dcl vencedor : map String to nat := maximumValue(pontuacoes);
		let x in set dom vencedor in
			return getTentativasJogador(x)
	);

	--Retorna o numero de tentativas de todos os jogos jogados pelo vencedor
	public getPontuacoes : () ==> map String to nat
	getPontuacoes () ==
		return { jogador |-> getPontuacao(jogador) | jogador in set jogadores };
		
	--Retorna o numero de tentativas de todos os jogos jogados por esse jogador
	public getTentativasJogador : String ==> nat
	getTentativasJogador (jogador) ==
	(
		dcl numTentativas : nat := 0;
		let jogo in set jogosJogador(jogador) in
			numTentativas := numTentativas + jogo.getTabuleiroJogador(jogador).numTentativasFeitas();
		return numTentativas;
	)
	pre jogador in set jogadores;
	
	--Recebe um map jogador->pontuação com todos os jogadores e respetiva pontuacao
	--Retorna um map com jogadorVencedor->pontuaçãoMaisAlta
	private maximumValue : map String to nat ==> map String to nat  
		maximumValue(mapa) == (
			if card dom mapa = 1 then
				return mapa
			else
				let x in set dom mapa in
					let max = maximumValue({x} <-: mapa) in
						let y in set rng max in
							if mapa(x) > y then
								return {x |-> mapa(x)}
							else 
								return max
		)
		pre card dom mapa <> 0;
	
	
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Campeonato