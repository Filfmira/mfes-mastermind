class JogoTest is subclass of MyTestCase
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations

	static public testTodos : () ==> ()
		testTodos () == (
			IO`println("#######################################");
			IO`println("Testes Jogo:");
			testConstrutor1();
			testGetTabuleiroAdversario();
			testGetTabuleiroJogador();
		);

	static public testConstrutor1: () ==> ()
		testConstrutor1 () ==
		(
			dcl tabuleiro1 : Tabuleiro := new Tabuleiro(['a', 'b', 'c', 'd']);
			dcl tabuleiro2 : Tabuleiro := new Tabuleiro(['f', 'e', 'd', 'c']);
			dcl jogo : Jogo := new Jogo({ 
				"jogador1" |-> tabuleiro1,
				"jogador2" |-> tabuleiro2
				});
			
			assertEqual(2, card jogo.getJogadores());
			assertEqual({"jogador1", "jogador2"}, jogo.getJogadores());
			assertEqual(tabuleiro1, jogo.getTabuleiros()("jogador1"));
			assertEqual(tabuleiro2, jogo.getTabuleiros()("jogador2"));
			IO`println("Passou testConstrutor1");
		);	
		
		static public testGetTabuleiroAdversario: () ==> ()
		testGetTabuleiroAdversario () ==
		(
			dcl tabuleiro1 : Tabuleiro := new Tabuleiro(['a', 'b', 'c', 'd']);
			dcl tabuleiro2 : Tabuleiro := new Tabuleiro(['f', 'e', 'd', 'c']);
			dcl jogo : Jogo := new Jogo({ 
				"jogador1" |-> tabuleiro1,
				"jogador2" |-> tabuleiro2
				});
			
			assertEqual(tabuleiro1, jogo.getTabuleiroAdversario("jogador2"));
			assertEqual(tabuleiro2, jogo.getTabuleiroAdversario("jogador1"));
			IO`println("Passou testGetTabuleiroAdversario");
		);	
		
		static public testGetTabuleiroJogador: () ==> ()
		testGetTabuleiroJogador () ==
		(
			dcl tabuleiro1 : Tabuleiro := new Tabuleiro(['a', 'b', 'c', 'd']);
			dcl tabuleiro2 : Tabuleiro := new Tabuleiro(['f', 'e', 'd', 'c']);
			dcl jogo : Jogo := new Jogo({ 
				"jogador1" |-> tabuleiro1,
				"jogador2" |-> tabuleiro2
				});
			
			assertEqual(tabuleiro1, jogo.getTabuleiroJogador("jogador1"));
			assertEqual(tabuleiro2, jogo.getTabuleiroJogador("jogador2"));
			IO`println("Passou testGetTabuleiroJogador");
		);	

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end JogoTest