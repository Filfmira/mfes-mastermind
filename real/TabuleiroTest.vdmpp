class TabuleiroTest
types
	public String = Utilities`String;
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations

	static public testTodos : () ==> ()
		testTodos () == (
			testConstrutor1();
			testConstrutor2();
			testTentativa1();	
			testTentativa2();	
			testTentativa3();
		);

	static public testConstrutor1 : () ==> ()
		testConstrutor1 () ==
		(
			dcl tabuleiro : Tabuleiro := new Tabuleiro();
			
			-- testar se a chave gerada tem tamanho 4
			dcl tamanho : nat := 4;
			assertEqual(tamanho, len tabuleiro.getChave());
			
			-- testar se o set de tentativas está vazio
			tamanho := 0;		
			assertEqual(tamanho, len tabuleiro.getTentativas());
			
			IO`println("Passou testConstrutor1");
		);
		
		static public testConstrutor2 : () ==> ()
		testConstrutor2 () ==
		(
			dcl tabuleiro : Tabuleiro := new Tabuleiro(['a', 'b', 'c', 'd']);
			
			-- testar se a chave gerada tem tamanho 4
			dcl tamanho : nat := 4;
			assertEqual(tamanho, len tabuleiro.getChave());
			
			-- testar se o set de tentativas está vazio
			tamanho := 0;		
			assertEqual(tamanho, len tabuleiro.getTentativas());
			
			-- testar se a chave do tabuleiro é igual à enviada no construtor
			assertEqual(['a', 'b', 'c', 'd'], tabuleiro.getChave());
			IO`println("Passou testConstrutor2");
		);
		
		static public testTentativa1 : () ==> ()
		testTentativa1 () ==
		(
			dcl tabuleiro : Tabuleiro := new Tabuleiro(['d', 'c', 'b', 'a']);

			dcl numTentativasRestantes : nat := 9;
			dcl numTentativasFeitas : nat := 0;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			
			tabuleiro.fazerJogada(['d', 'c', 'b', 'a']);
			
			numTentativasRestantes := 8;
			numTentativasFeitas := 1;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			
			IO`println("Passou testTentativa1");
		);
		
		static public testTentativa2 : () ==> ()
		testTentativa2 () ==
		(
			dcl tabuleiro : Tabuleiro := new Tabuleiro(['d', 'c', 'b', 'a']);

			dcl numTentativasRestantes : nat := 9;
			dcl numTentativasFeitas : nat := 0;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			
			numTentativasRestantes := 8;
			numTentativasFeitas := 1;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			assertEqual(false, tabuleiro.isChaveEncontrada()); --testa chave
			assertEqual(false, tabuleiro.gameOver()); -- testa chave e num tentativas
			
			tabuleiro.fazerJogada(['d', 'c', 'b', 'a']);
			
			numTentativasRestantes := 7;
			numTentativasFeitas := 2;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			assertEqual(true, tabuleiro.isChaveEncontrada());
			assertEqual(true, tabuleiro.gameOver());
			
			IO`println("Passou testTentativa2");
		);
		
		static public testTentativa3 : () ==> ()
		testTentativa3 () ==
		(
			dcl tabuleiro : Tabuleiro := new Tabuleiro(['d', 'c', 'b', 'a']);

			dcl numTentativasRestantes : nat := 9;
			dcl numTentativasFeitas : nat := 0;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			
			numTentativasRestantes := 1;
			numTentativasFeitas := 8;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			assertEqual(false, tabuleiro.isChaveEncontrada()); --testa chave
			assertEqual(false, tabuleiro.gameOver()); -- testa chave e num tentativas
			
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			
			numTentativasRestantes := 0;
			numTentativasFeitas := 9;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			assertEqual(false, tabuleiro.isChaveEncontrada()); --testa chave
			assertEqual(true, tabuleiro.gameOver()); -- testa chave e num tentativas
			
			IO`println("Passou testTentativa3");
		);
		
	
	
		-- Simulates assertion checking by reducing it to pre-condition checking.
    -- If 'arg' does not hold, a pre-condition violation will be signaled.
    static protected assertTrue: bool ==> ()
    assertTrue(arg) == return
    pre arg;
 
    -- Simulates assertion checking by reducing it to post-condition checking.
    -- If values are not equal, prints a message in the console and generates
    -- a post-conditions violation.
    static protected assertEqual: ? * ? ==> ()
    assertEqual(expected, actual) ==
            if expected <> actual then (
            IO`print("Actual value (");
            IO`print(actual);
            IO`print(") different from expected (");
            IO`print(expected);
            IO`println(")\n")
            )
    post expected = actual
    
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end TabuleiroTest