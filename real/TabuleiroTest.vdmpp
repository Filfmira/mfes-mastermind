class TabuleiroTest is subclass of MyTestCase
types
	
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations

	static public testTodos : () ==> ()
		testTodos () == (
			IO`println("#######################################");
			IO`println("Testes Tabuleiro:");
			testConstrutor1();
			testConstrutor2();
			testTentativa1();	
			testTentativa2();	
			testTentativa3();
			testCoresSitiosCertos();
			testCoresSitiosErrados();
		);

	static public testConstrutor1 : () ==> ()
		testConstrutor1 () ==
		(
			dcl tabuleiro : Tabuleiro := new Tabuleiro();
			
			-- testar se a chave gerada tem tamanho 4
			dcl tamanho : nat := 4;
			assertEqual(tamanho, len tabuleiro.getChave());
			
			-- testar se o set de tentativas está vazio
			tamanho := 0;		
			assertEqual(tamanho, len tabuleiro.getTentativas());
			
			IO`println("Passou testConstrutor1");
		);
		
		static public testConstrutor2 : () ==> ()
		testConstrutor2 () ==
		(
			dcl tabuleiro : Tabuleiro := new Tabuleiro(['a', 'b', 'c', 'd']);
			
			-- testar se a chave gerada tem tamanho 4
			dcl tamanho : nat := 4;
			assertEqual(tamanho, len tabuleiro.getChave());
			
			-- testar se o set de tentativas está vazio
			tamanho := 0;		
			assertEqual(tamanho, len tabuleiro.getTentativas());
			
			-- testar se a chave do tabuleiro é igual à enviada no construtor
			assertEqual(['a', 'b', 'c', 'd'], tabuleiro.getChave());
			IO`println("Passou testConstrutor2");
		);
		
		static public testTentativa1 : () ==> ()
		testTentativa1 () ==
		(
			dcl tabuleiro : Tabuleiro := new Tabuleiro(['d', 'c', 'b', 'a']);

			dcl numTentativasRestantes : nat := 9;
			dcl numTentativasFeitas : nat := 0;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			
			tabuleiro.fazerJogada(['d', 'c', 'b', 'a']);
			
			numTentativasRestantes := 8;
			numTentativasFeitas := 1;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			
			IO`println("Passou testTentativa1");
		);
		
		static public testTentativa2 : () ==> ()
		testTentativa2 () ==
		(
			dcl tabuleiro : Tabuleiro := new Tabuleiro(['d', 'c', 'b', 'a']);

			dcl numTentativasRestantes : nat := 9;
			dcl numTentativasFeitas : nat := 0;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			
			numTentativasRestantes := 8;
			numTentativasFeitas := 1;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			assertEqual(false, tabuleiro.isChaveEncontrada()); --testa chave
			assertEqual(false, tabuleiro.gameOver()); -- testa chave e num tentativas
			
			tabuleiro.fazerJogada(['d', 'c', 'b', 'a']);
			
			numTentativasRestantes := 7;
			numTentativasFeitas := 2;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			assertEqual(true, tabuleiro.isChaveEncontrada());
			assertEqual(true, tabuleiro.gameOver());
			
			IO`println("Passou testTentativa2");
		);
		
		static public testTentativa3 : () ==> ()
		testTentativa3 () ==
		(
			dcl tabuleiro : Tabuleiro := new Tabuleiro(['d', 'c', 'b', 'a']);

			dcl numTentativasRestantes : nat := 9;
			dcl numTentativasFeitas : nat := 0;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			
			numTentativasRestantes := 1;
			numTentativasFeitas := 8;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			assertEqual(false, tabuleiro.isChaveEncontrada()); --testa chave
			assertEqual(false, tabuleiro.gameOver()); -- testa chave e num tentativas
			
			tabuleiro.fazerJogada(['d', 'c', 'b', 'b']);
			
			numTentativasRestantes := 0;
			numTentativasFeitas := 9;
			
			assertEqual(numTentativasRestantes, tabuleiro.numTentativasRestantes());
			assertEqual(numTentativasFeitas, tabuleiro.numTentativasFeitas());
			assertEqual(false, tabuleiro.isChaveEncontrada()); --testa chave
			assertEqual(true, tabuleiro.gameOver()); -- testa chave e num tentativas
			
			IO`println("Passou testTentativa3");
		);
		
		static public testCoresSitiosCertos : () ==> ()
		testCoresSitiosCertos () ==
		(
			dcl tabuleiro : Tabuleiro := new Tabuleiro(['d', 'c', 'b', 'a']);
			assertEqual(3, tabuleiro.calcularCoresSitiosCertos(['d', 'f', 'b', 'a']));
			IO`println("Passou testCoresSitiosCertos");
		);
		
		static public testCoresSitiosErrados : () ==> ()
		testCoresSitiosErrados () ==
		(
			dcl tabuleiro : Tabuleiro := new Tabuleiro(['d', 'c', 'b', 'a']);
			assertEqual(2, tabuleiro.calcularCoresSitiosErrados(['d', 'f', 'a', 'b']));
			IO`println("Passou testCoresSitiosErrados");
		);
		
    
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end TabuleiroTest