class CampeonatoTest is subclass of MyTestCase
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations

	static public testTodos : () ==> ()
	testTodos () == (
		IO`println("#######################################");
		IO`println("Testes Campeonato:");
		testNovoJogo();
		testTentativasVencedor();
		testAdicionarNovoJogoAleatorio();
		testAdicionarJogadores();
		testGetJogadoresJogos();
		testRankJogador();
	);
	
	
	static public testNovoJogo : () ==> ()
	testNovoJogo () ==
	(
		dcl campeonato : Campeonato := new Campeonato({"Bandeira", "Mira", "FilipeDeBraga", "Pires"});
		dcl jogo : Jogo := campeonato.novoJogo(
		 {
		 		"Bandeira" |-> ['a', 'b', 'c', 'd'], 
				"Mira" |-> ['f', 'e', 'd', 'c']
			});

				
		assertEqual(1, card campeonato.getJogos());
		IO`println("Passou testNovoJogo");
	);
	
	static public testTentativasVencedor : () ==> ()
	testTentativasVencedor () ==
	(
		dcl campeonato : Campeonato := new Campeonato({"Bandeira", "Mira", "FilipeDeBraga", "Pires"});
		dcl jogo : Jogo := campeonato.novoJogo(
		 {
		 		"Bandeira" |-> ['a', 'b', 'c', 'd'], 
				"Mira" |-> ['f', 'e', 'd', 'c']
			});
			
		dcl tabuleiro1 : Tabuleiro := jogo.getTabuleiroJogador("Bandeira");
		dcl tabuleiro2 : Tabuleiro := jogo.getTabuleiroJogador("Mira");
		
		tabuleiro1.fazerJogada(['a', 'b', 'c', 'd']);
		tabuleiro1.fazerJogada(['d', 'e', 'f', 'f']);
		tabuleiro1.fazerJogada(['f', 'e', 'd', 'c']);
		
		tabuleiro2.fazerJogada(['a', 'b', 'c', 'd']);
		
		assertEqual(1, campeonato.getTentativasVencedor());
		IO`println("Passou testTentativasVencedor");
	);
	
	static public testAdicionarNovoJogoAleatorio : () ==> ()
	testAdicionarNovoJogoAleatorio () == 
	(
		dcl campeonato : Campeonato := new Campeonato({"Bandeira", "Mira", "FilipeDeBraga", "Pires"});
		dcl jogo : Jogo := campeonato.novoJogoAleatorio("Bandeira", "Mira");
		dcl jogadores : set of String := {"Bandeira","Mira"};
		-- testar se o número de jogos passou para 1
		assertEqual(1, card campeonato.getJogos());
		
		-- testar se as equipas adicionadas são as pretendidas
		assertEqual(jogadores, jogo.getJogadores());
	
		IO`println("Passou testAdicionarNovoJogoAleatorio");
	);
	
	static public testAdicionarJogadores : () ==> ()
	testAdicionarJogadores () == 
	(
		dcl campeonato : Campeonato := new Campeonato({"Bandeira", "Mira"});
		
		-- testar se o número de equipas inicial é 2
		assertEqual(2, card campeonato.getJogadores());
		
		campeonato.adicionarJogadores({"FilipeDeBraga", "Pires"});
		-- testar se o número de equipas passou para 4
		assertEqual(4, card campeonato.getJogadores());
	
		IO`println("Passou testAdicionarJogadores");
	);
	
	static public testGetJogadoresJogos : () ==> ()
	testGetJogadoresJogos () ==
	(
		dcl campeonato : Campeonato := new Campeonato({"Bandeira", "Mira", "FilipeDeBraga", "Pires"});
		dcl jogo1 : Jogo := campeonato.novoJogoAleatorio("Bandeira", "Mira");
		dcl jogo2 : Jogo := campeonato.novoJogoAleatorio("FilipeDeBraga", "Pires");
		dcl jogadores : set of set of String := {{"Bandeira","Mira"},{"FilipeDeBraga", "Pires"}};
		
		assertEqual(jogadores, campeonato.getJogadoresJogos());
		
		IO`println("Passou testGetEquipasJogos");
	);
	
	static public testRankJogador : () ==> () 
	testRankJogador () ==
	(
		dcl campeonato : Campeonato := new Campeonato({"Bandeira", "Mira", "FilipeDeBraga", "Pires"});
		dcl jogo1 : Jogo := campeonato.novoJogo(
		 {
		 		"Bandeira" |-> ['a', 'b', 'c', 'd'], 
				"Mira" |-> ['f', 'e', 'd', 'c']
			});
			
		dcl tabuleiro1 : Tabuleiro := jogo1.getTabuleiroJogador("Bandeira");
		dcl tabuleiro2 : Tabuleiro := jogo1.getTabuleiroJogador("Mira");
		
		dcl jogo2 : Jogo := campeonato.novoJogo(
		 {
		 		"FilipeDeBraga" |-> ['a', 'b', 'c', 'd'], 
				"Pires" |-> ['f', 'e', 'd', 'c']
			});
			
		dcl tabuleiro3 : Tabuleiro := jogo2.getTabuleiroJogador("FilipeDeBraga");
		dcl tabuleiro4 : Tabuleiro := jogo2.getTabuleiroJogador("Pires");
		
		tabuleiro1.fazerJogada(['a', 'b', 'c', 'd']);
		tabuleiro1.fazerJogada(['d', 'e', 'f', 'f']);
		tabuleiro1.fazerJogada(['f', 'e', 'd', 'c']);
		
		tabuleiro2.fazerJogada(['a', 'b', 'c', 'd']);
		
		
		tabuleiro3.fazerJogada(['a', 'b', 'c', 'd']);
		tabuleiro3.fazerJogada(['d', 'e', 'f', 'f']);
		tabuleiro3.fazerJogada(['d', 'e', 'f', 'f']);
		tabuleiro3.fazerJogada(['f', 'e', 'd', 'c']);
		
		tabuleiro4.fazerJogada(['b', 'b', 'c', 'd']);
		tabuleiro4.fazerJogada(['a', 'b', 'c', 'd']);
		
		assertEqual(1, campeonato.getRankJogador("Mira"));
		assertEqual(2, campeonato.getRankJogador("Pires"));
		assertEqual(3, campeonato.getRankJogador("Bandeira"));
		assertEqual(4, campeonato.getRankJogador("FilipeDeBraga"));
		
		IO`println("Passou testRankJogador");
		
	);
	
	
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end CampeonatoTest